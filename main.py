import logging
import requests

from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram import F

from config import TOKEN, PATCHED_URL, KINOPOISK_TOKEN
from constants import greetings, genres
from utils import get_name, get_greetings, keyboard


#setattr(api, "API_URL", PATCHED_URL)

bot = Bot(token=TOKEN)
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


@dp.message(Command('start', 'help'))
async def start_command(msg):
    user = get_name(msg)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} (@{msg.from_user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É: {msg.text}")

    welcome_msg = f"–ü—Ä–∏–≤–µ—Ç, {user}! üëã\n\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º –Ω–∞ –≤–µ—á–µ—Ä! üé¨\n\n–ù–∞–ø–∏—à–∏ –º–Ω–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –∑–∞–ø–æ–ª–Ω–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É, –∏ —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã!"
    await msg.answer(welcome_msg, reply_markup=keyboard)

    logger.info(f"–û—Ç–ø—Ä–∞–≤–∏–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}")


#@dp.message(Text(equals=greetings, ignore_case=True))
@dp.message(F.text.in_(greetings))
async def greet(msg):
    user = get_name(msg)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user} (@{msg.from_user.username}) - —Å–æ–æ–±—â–µ–Ω–∏–µ: '{msg.text}'")

    greeting = get_greetings()
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: '{greeting}'")

    await msg.answer(f"{greeting}, {user}")
    await msg.answer('–ö–∞–∫–æ–π —Ç–≤–æ–π –ª—é–±–∏–º—ã–π –∂–∞–Ω—Ä?', reply_markup=keyboard)

    logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∂–∞–Ω—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}")


@dp.callback_query(F.text.in_(genres))
async def mood_callback(query):
    data = query.data
    user = get_name(query)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} (@{query.from_user.username}) –≤—ã–±—Ä–∞–ª –∂–∞–Ω—Ä: {data}")

    if data == '–∫–æ–º–µ–¥–∏—è':
        logger.info(f"–†–µ–∫–æ–º–µ–Ω–¥—É—é –∫–æ–º–µ–¥–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}")
        await bot.send_message(query.from_user.id, f'–∏—â—É –ª—É—á—à–∏–µ –∫–æ–º–µ–¥–∏–∏ –¥–ª—è —Ç–µ–±—è, {user}')
        r = requests.get('https://api.kinopoisk.dev/v1.4/movie?page=1&limit=1&selectFields(0)=name&selectFields(1)=description$selectFields(2)=poster&sortField=externalId.imdb&sortType=-1&type=movie&status=completed&year=1990-2025&genres.name=–ö–æ–º–µ–¥–∏—è', headers={"X-API-KEY":KINOPOISK_TOKEN})
        kino_resp = r.json()
        logger.info(f"–û—Ç–≤–µ—Ç –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞: {kino_resp}")
        await bot.send_message(query.from_user.id,'–°–º–æ—Ç—Ä–µ–ª —É–∂–µ —ç—Ç–æ—Ç —à–µ–¥–µ–≤—Ä?')
        if kino_resp["docs"][0]["name"] is None:
            await bot.send_message(query.from_user.id, kino_resp["docs"][0]["alternativeName"])
        else:
            await bot.send_message(query.from_user.id, kino_resp["docs"][0]["name"])
        await bot.send_photo(query.from_user.id, kino_resp["docs"][0]["previewUrl"])
        if kino_resp["docs"][0]["description"] is not None:
            await bot.send_message(query.from_user.id, kino_resp["docs"][0]["description"])



@dp.message()
async def handle_other_messages(msg):
    user = get_name(msg)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user} (@{msg.from_user.username}): '{msg.text}'")
    logger.info(f"–ò–≥–Ω–æ—Ä–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user}")


if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    dp.start_polling(bot)